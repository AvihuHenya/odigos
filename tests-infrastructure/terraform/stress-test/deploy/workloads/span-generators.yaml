---
apiVersion: v1
kind: Namespace
metadata:
  name: load-test
---
apiVersion: v1
kind: Namespace
metadata:
  name: load-test
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-span-src
  namespace: load-test
data:
  package.json: |
    {
      "name": "node-span-gen",
      "version": "1.0.0",
      "private": true,
      "type": "module",
      "dependencies": {
        "@opentelemetry/api": "1.8.0"
      }
    }
  app.js: |
    import { trace } from '@opentelemetry/api';

    const tracer = trace.getTracer('node-span-gen');

    // Configurable knobs
    const spansPerSec = Number(process.env.SPANS_PER_SEC || '6000');

    function emitBatch(n) {
      const attrPayload = 'x'.repeat(4000);

      for (let i = 0; i < n; i++) {
        const span = tracer.startSpan('load-span');
        span.setAttribute('a', attrPayload);
        span.setAttribute('b', attrPayload);
        span.setAttribute('c', attrPayload);
        span.end();
      }
      console.log(`[node-span-gen] emitted ${n} spans at ${new Date().toISOString()}`);
    }

    setInterval(() => emitBatch(spansPerSec), 1000);
    setInterval(() => {}, 1 << 30); // keep alive
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: span-node
  namespace: load-test
  labels:
    app: span-node
spec:
  replicas: 0 
  selector:
    matchLabels:
      app: span-node
      odigos-target: "true"
  template:
    metadata:
      labels:
        app: span-node
        odigos-target: "true"
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
        - name: copy-src
          image: busybox:1.36
          command: ["sh","-c"]
          args: ["mkdir -p /work && cp -a /src/. /work/"]
          volumeMounts:
            - name: src
              mountPath: /src
            - name: work
              mountPath: /work
      containers:
        - name: node
          image: node:20-alpine
          workingDir: /work
          env:
            - name: OTEL_SERVICE_NAME
              value: node-span-gen
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=node-span-gen

            # ---- knobs for testing ----
            - name: SPANS_PER_SEC
              value: "6000"      

          command: ["sh","-c"]
          args: ["npm install --omit=dev && node app.js"]
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          volumeMounts:
            - name: work
              mountPath: /work
      volumes:
        - name: src
          configMap:
            name: node-span-src
        - name: work
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-span-src
  namespace: load-test
data:
  go.mod: |
    module example.com/go-span-gen
    go 1.22

    require go.opentelemetry.io/otel v1.37.0
  main.go: |
    package main

    import (
      "context"
      "os"
      "strconv"
      "strings"
      "time"

      "go.opentelemetry.io/otel"
      "go.opentelemetry.io/otel/attribute"
    )

    // Best practice: use module/package name as tracer name
    var tracer = otel.Tracer("example.com/go-span-gen")

    func getenvInt(name string, def int) int {
      if v := os.Getenv(name); v != "" {
        if n, err := strconv.Atoi(v); err == nil {
          return n
        }
      }
      return def
    }

    func main() {
      spansPerSec := getenvInt("SPANS_PER_SEC", 50)
      spanBytes := getenvInt("SPAN_BYTES", 10000)
      payload := strings.Repeat("x", spanBytes)

      ticker := time.NewTicker(time.Second)
      defer ticker.Stop()

      for range ticker.C {
        for i := 0; i < spansPerSec; i++ {
          ctx, span := tracer.Start(context.Background(), "load-span")
          span.SetAttributes(
            attribute.String("payload", payload),
            attribute.String("lang", "go"),
            attribute.String("gen", "go-span-gen"),
          )
          span.End()
          _ = ctx
          time.Sleep(100 * time.Millisecond)
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: span-go
  namespace: load-test
  labels:
    app: span-go
spec:
  replicas: 2
  selector:
    matchLabels:
      app: span-go
      odigos-target: "true"
  template:
    metadata:
      labels:
        app: span-go
        odigos-target: "true"
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
        - name: copy-src
          image: busybox:1.36
          command: ["sh","-c"]
          args: ["mkdir -p /work && cp -a /src/. /work/"]
          volumeMounts:
            - name: src
              mountPath: /src
            - name: work
              mountPath: /work
      containers:
        - name: go
          image: golang:1.23-alpine
          workingDir: /work
          env:
            - name: OTEL_SERVICE_NAME
              value: go-span-gen
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=go-span-gen
            - name: SPANS_PER_SEC
              value: "5000"
            - name: SPAN_BYTES
              value: "10000"
          command: ["sh","-c"]
          args: ["apk add --no-cache git && go mod tidy && go run ."]
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          volumeMounts:
            - name: work
              mountPath: /work
      volumes:
        - name: src
          configMap:
            name: go-span-src
        - name: work
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: py-span-src
  namespace: load-test
data:
  requirements.txt: |
    opentelemetry-api==1.26.0
  app.py: |
    import os, time
    from opentelemetry import trace

    tracer = trace.get_tracer(__name__)

    spans_per_sec = int(os.getenv("SPANS_PER_SEC", "2000"))
    span_bytes = int(os.getenv("SPAN_BYTES", "500"))
    payload = "x" * span_bytes
    PREVIEW_LEN = min(100, span_bytes)

    def emit_batch(n: int):
        for _ in range(n):
            with tracer.start_as_current_span("load-span") as span:
                span.set_attribute("payload_size", span_bytes)
                span.set_attribute("payload_preview", payload[:PREVIEW_LEN])
                span.set_attribute("lang", "python")
                span.set_attribute("gen", "py-span-gen")

    while True:
        start = time.time()
        emit_batch(spans_per_sec)
        elapsed = time.time() - start
        time.sleep(max(0.0, 1.0 - elapsed))
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: span-python
  namespace: load-test
  labels:
    app: span-python
spec:
  replicas: 2
  selector:
    matchLabels:
      app: span-python
      odigos-target: "true"
  template:
    metadata:
      labels:
        app: span-python
        odigos-target: "true"
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
        - name: copy-src
          image: busybox:1.36
          command: ["sh","-c"]
          args: ["mkdir -p /work && cp -a /src/. /work/"]
          volumeMounts:
            - name: src
              mountPath: /src
            - name: work
              mountPath: /work
      containers:
        - name: python
          image: python:3.12-alpine
          workingDir: /work
          env:
            - name: PYTHONPATH
              value: /work/site-packages:/var/odigos/python
            - name: OTEL_SERVICE_NAME
              value: python-span-gen
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=python-span-gen
            - name: SPANS_PER_SEC
              value: "2000"
            - name: SPAN_BYTES
              value: "500"
          command: ["sh","-c"]
          args:
            - |
              python -m pip install --no-cache-dir -r requirements.txt --target /work/site-packages && \
              python /work/app.py
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "768Mi"
          volumeMounts:
            - name: work
              mountPath: /work
      volumes:
        - name: src
          configMap:
            name: py-span-src
        - name: work
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: java-span-src
  namespace: load-test
data:
  App.java: |
    //DEPS io.opentelemetry:opentelemetry-api:1.41.0
    //DEPS io.opentelemetry:opentelemetry-sdk:1.41.0
    //DEPS io.opentelemetry:opentelemetry-exporter-otlp:1.41.0
    import io.opentelemetry.api.GlobalOpenTelemetry;
    import io.opentelemetry.api.trace.Span;
    import io.opentelemetry.api.trace.Tracer;
    import io.opentelemetry.sdk.OpenTelemetrySdk;
    import io.opentelemetry.sdk.resources.Resource;
    import io.opentelemetry.sdk.trace.SdkTracerProvider;
    import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;
    import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;

    public class App {
      static int getInt(String name, int def) {
        try { return Integer.parseInt(System.getenv().getOrDefault(name, String.valueOf(def))); }
        catch (Exception e) { return def; }
      }
      public static void main(String[] args) throws Exception {
        var exporter = OtlpGrpcSpanExporter.builder().build();
        var res = Resource.getDefault().toBuilder()
          .put("service.name", System.getenv().getOrDefault("OTEL_SERVICE_NAME","java-span-gen"))
          .build();
        var tp = SdkTracerProvider.builder()
          .setResource(res)
          .addSpanProcessor(BatchSpanProcessor.builder(exporter).build())
          .build();
        OpenTelemetrySdk.builder().setTracerProvider(tp).buildAndRegisterGlobal();
        Tracer tracer = GlobalOpenTelemetry.getTracer("java-span-gen");

        int spansPerSec = getInt("SPANS_PER_SEC", 50);
        int spanBytes = getInt("SPAN_BYTES", 50000);
        String payload = "x".repeat(spanBytes);

        while (true) {
          long start = System.currentTimeMillis();
          for (int i = 0; i < spansPerSec; i++) {
            Span s = tracer.spanBuilder("load-span").startSpan();
            s.setAttribute("payload", payload);
            s.setAttribute("lang", "java");
            s.setAttribute("gen", "java-span-gen");
            s.end();
          }
          long elapsed = System.currentTimeMillis() - start;
          long sleep = 1000 - elapsed;
          if (sleep > 0) Thread.sleep(sleep);
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: span-java
  namespace: load-test
  labels:
    app: span-java
spec:
  replicas: 2
  selector:
    matchLabels:
      app: span-java
      odigos-target: "true"
  template:
    metadata:
      labels:
        app: span-java
        odigos-target: "true"
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: java
          image: jbangdev/jbang:latest
          workingDir: /app
          env:
            - name: OTEL_SERVICE_NAME
              value: java-span-gen
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=java-span-gen
            - name: SPANS_PER_SEC
              value: "50"
            - name: SPAN_BYTES
              value: "50000"
          command: ["sh","-c"]
          args: ["jbang /app/App.java"]
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
          volumeMounts:
            - name: src
              mountPath: /app
      volumes:
        - name: src
          configMap:
            name: java-span-src
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dotnet-span-src
  namespace: load-test
data:
  app.csproj: |
    <Project Sdk="Microsoft.NET.Sdk">
      <PropertyGroup>
        <OutputType>Exe</OutputType>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
      </PropertyGroup>
      <ItemGroup>
        <PackageReference Include="OpenTelemetry" Version="1.9.0" />
        <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
        <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.9.0" />
      </ItemGroup>
    </Project>
  Program.cs: |
    using System.Diagnostics;
    using OpenTelemetry;
    using OpenTelemetry.Resources;
    using OpenTelemetry.Trace;

    static int GetInt(string name, int defVal)
      => int.TryParse(Environment.GetEnvironmentVariable(name), out var v) ? v : defVal;

    var serviceName = Environment.GetEnvironmentVariable("OTEL_SERVICE_NAME") ?? "dotnet-span-gen";
    var spansPerSec = GetInt("SPANS_PER_SEC", 50);
    var spanBytes = GetInt("SPAN_BYTES", 50000);
    var payload = new string('x', spanBytes);

    using var tracerProvider = Sdk.CreateTracerProviderBuilder()
      .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(serviceName))
      .AddSource("dotnet-span-gen")
      .AddOtlpExporter()
      .Build();

    var source = new ActivitySource("dotnet-span-gen");

    while (true)
    {
      var start = DateTime.UtcNow;
      for (int i = 0; i < spansPerSec; i++)
      {
        using var activity = source.StartActivity("load-span", ActivityKind.Internal);
        if (activity is not null)
        {
          activity.SetTag("payload", payload);
          activity.SetTag("lang", "dotnet");
          activity.SetTag("gen", "dotnet-span-gen");
        }
      }
      var elapsed = (DateTime.UtcNow - start).TotalMilliseconds;
      var sleep = Math.Max(0, 1000 - (int)elapsed);
      await Task.Delay(sleep);
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: span-dotnet
  namespace: load-test
  labels:
    app: span-dotnet
spec:
  replicas: 2
  selector:
    matchLabels:
      app: span-dotnet
      odigos-target: "true"
  template:
    metadata:
      labels:
        app: span-dotnet
        odigos-target: "true"
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
        - name: copy-src
          image: busybox:1.36
          command: ["sh","-c"]
          args: ["mkdir -p /work && cp -a /src/. /work/"]
          volumeMounts:
            - name: src
              mountPath: /src
            - name: work
              mountPath: /work
      containers:
        - name: dotnet
          image: mcr.microsoft.com/dotnet/sdk:8.0-alpine
          workingDir: /work
          env:
            - name: OTEL_SERVICE_NAME
              value: dotnet-span-gen
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=dotnet-span-gen
            - name: SPANS_PER_SEC
              value: "50"
            - name: SPAN_BYTES
              value: "50000"
          command: ["sh","-c"]
          args: ["dotnet restore && dotnet run -c Release"]
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
          volumeMounts:
            - name: work
              mountPath: /work
      volumes:
        - name: src
          configMap:
            name: dotnet-span-src
        - name: work
          emptyDir: {}